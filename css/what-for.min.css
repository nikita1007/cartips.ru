.what-for{margin-top:10rem}.what-for .what-for__list{display:-webkit-box;display:-ms-flexbox;display:flex;margin-top:7rem;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.what-for .what-for__list .what-for__item{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;max-width:42rem;background:#fff;-webkit-box-shadow:0 6px 54px rgba(218,225,231,.53);box-shadow:0 6px 54px rgba(218,225,231,.53);padding:2.2rem 3.1rem 3.8rem;border-radius:6rem;margin:1.5rem 0;margin-right:6.4rem}.what-for .what-for__list .what-for__item:nth-child(2n){margin-right:0;margin-left:6.4rem}.what-for .what-for__list .what-for__item .what-for__item-count{font-weight:800;font-size:6.4rem;line-height:8.7rem;color:#459edc;margin-right:2.5rem}@media (max-width:1024px){.what-for .what-for__list .what-for__item{margin:1.5rem 0;margin-right:1.5rem}.what-for .what-for__list .what-for__item:nth-child(2n){margin-right:0;margin-left:1.5rem}}@media (max-width:925px){.what-for .what-for__list .what-for__item{margin:1.5rem 0;margin-left:0!important;margin-right:0!important}.what-for .what-for__list{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center}}@media (max-width:425px){.what-for .what-for__list .what-for__item .what-for__item-count{margin-right:1.5rem;font-size:5rem;line-height:5.7rem}.what-for .what-for__list .what-for__item{border-radius:4.5rem}.what-for .what-for__list{margin-top:5rem}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */